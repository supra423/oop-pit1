package org.example;

import javax.swing.*;
import java.awt.*;
import java.util.Objects;

public class Inventory {

    // this is a bit confusing so I'll explain

    // first we grab the png file from the resources directory
    private final static ImageIcon product1Icon = new ImageIcon(
            //Objects.requireNonNull is autogenerated by intelliJ lol
            Objects.requireNonNull(Inventory.class.getResource("/assets/ip10-white.png"))
    );
    private final static ImageIcon product2Icon = new ImageIcon(
            Objects.requireNonNull(Inventory.class.getResource("/assets/ip11-green.png"))
    );
    private final static ImageIcon product3Icon = new ImageIcon(
            Objects.requireNonNull(Inventory.class.getResource("/assets/ip13-pink.png"))
    );
    private final static ImageIcon product4Icon = new ImageIcon(
            Objects.requireNonNull(Inventory.class.getResource("/assets/ip14-blue.png"))
    );
    private final static ImageIcon product5Icon = new ImageIcon(
            Objects.requireNonNull(Inventory.class.getResource("/assets/ip15-blue.png"))
    );
    private final static ImageIcon product6Icon = new ImageIcon(
            Objects.requireNonNull(Inventory.class.getResource("/assets/ip16-pink.png"))
    );
    private final static ImageIcon product7Icon = new ImageIcon(
            Objects.requireNonNull(Inventory.class.getResource("/assets/ip17-orange.png"))
    );
    private final static ImageIcon product8Icon = new ImageIcon(
            Objects.requireNonNull(Inventory.class.getResource("/assets/iphone-12-mini-blue.png"))
    );

    // we then resize them
    private final static Image scaledProduct1Icon = product1Icon.getImage().getScaledInstance(130, 130, Image.SCALE_SMOOTH);
    private final static Image scaledProduct2Icon = product2Icon.getImage().getScaledInstance(130, 130, Image.SCALE_SMOOTH);
    private final static Image scaledProduct3Icon = product3Icon.getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH);
    private final static Image scaledProduct4Icon = product4Icon.getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH);
    private final static Image scaledProduct5Icon = product5Icon.getImage().getScaledInstance(140, 140, Image.SCALE_SMOOTH);
    private final static Image scaledProduct6Icon = product6Icon.getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH);
    private final static Image scaledProduct7Icon = product7Icon.getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH);
    private final static Image scaledProduct8Icon = product8Icon.getImage().getScaledInstance(130, 130, Image.SCALE_SMOOTH);

    // this is a bit weird because we then (kind of?) converted the Image object to an
    // ImageIcon object because JLabels for some reason does not accept a raw Image type object,
    // but it accepts an ImageIcon type object, so we did this by passing the raw Image type object
    // to a ImageIcon constructor which should then return an ImageIcon object that contains the
    // raw Image lol, weird behaviour indeed.
    private final static ImageIcon newProduct1Icon = new ImageIcon(scaledProduct1Icon);
    private final static ImageIcon newProduct2Icon = new ImageIcon(scaledProduct2Icon);
    private final static ImageIcon newProduct3Icon = new ImageIcon(scaledProduct3Icon);
    private final static ImageIcon newProduct4Icon = new ImageIcon(scaledProduct4Icon);
    private final static ImageIcon newProduct5Icon = new ImageIcon(scaledProduct5Icon);
    private final static ImageIcon newProduct6Icon = new ImageIcon(scaledProduct6Icon);
    private final static ImageIcon newProduct7Icon = new ImageIcon(scaledProduct7Icon);
    private final static ImageIcon newProduct8Icon = new ImageIcon(scaledProduct8Icon);

    // and then we define the actual product object itself
    private final static Product product1 = new Product("iPhone 10 White", 99.99, newProduct1Icon);
    private final static Product product2 = new Product("iPhone 11 Green", 199.99, newProduct2Icon);
    private final static Product product3 = new Product("iPhone 13 Pink", 299.99, newProduct3Icon);
    private final static Product product4 = new Product("iPhone 14 Blue", 399.99, newProduct4Icon);
    private final static Product product5 = new Product("iPhone 15 Blue", 499.99, newProduct5Icon);
    private final static Product product6 = new Product("iPhone 16 Pink", 599.99, newProduct6Icon);
    private final static Product product7 = new Product("iPhone 17 Orange", 699.99, newProduct7Icon);
    private final static Product product8 = new Product("iPhone 12 Mini Blue", 799.99, newProduct8Icon);

    // we use this to iterate through the stuff products
    private static final Product[] inventory = {
            product1, product2, product3,
            product4, product5, product6,
            product7, product8
    };

    public Product[] getInventory() {
        return inventory;
    }
}
